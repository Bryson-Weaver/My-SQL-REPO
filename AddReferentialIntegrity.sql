-- Bryson Weaver

--Enforcing referential integrity by adding foreign key constraints to: ORDERS, REVIEWS, and USERLIBRARY
ALTER TABLE Orders
ADD CONSTRAINT FK_ORDERS_USERID
FOREIGN KEY (USER_ID) REFERENCES USERBASE(USERID);

ALTER TABLE Orders
ADD CONSTRAINT FK_ORDERS_PRODUCTCODE
FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTLIST (PRODUCTCODE);

ALTER TABLES REVIEWS 
ADD CONSTRAINT FK_REVIEWS_PRODUCTCODE
FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTLIST (PRODUCTCODE);

ALTER TABLES REVIEWS 
ADD CONSTRAINT FK_REVIEWS_USERID
FOREIGN KEY (USERID) REFERENCES USERBASE (USERID);

ALTER TABLES USERLIBRARY 
ADD CONSTRAINT FK_USERLIBRARY_USERID
FOREIGN KEY (USERID) REFERENCES USERBASE (USERID);

ALTER TABLES  USERLIBRARY
ADD CONSTRAINT FK_USERLIBRARY_PRODUCTCODE
FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTLIST (PRODUCTCODE);

--Q2 Display full name and username of users 18+
SELECT FIRSTNAME || ' ' || LASTNAME AS FULLNAME, USERNAME
FROM USERBASE
WHERE BIRTHDAY <= ADD_MONTHS(SYSDATE, -216);

--Q3 Find maximum and average username length
SELECT MAX(LENGTH(USERNAME)), AVG(LENGTH(USERNAME))
FROM USERBASE;

--Show every question that starts with "what is" or "what was"
SELECT QUESTION FROM SECURITY QUESTION 
WHERE QUESTION LIKE 'What is%' OR 'What was%';

--Display the PRODUCTCODE, lowest RATING, and number of reviews for each product in the REVIEWS table. 
SELECT PRODUCTCODE, MIN(RATING), COUNT(REVIEW)
FROM REVIEWS
GROUP BY PRODUCTCODE
ORDER BY COUNT(REVIEW) DESC;

--Displaying info about products at top of user's wishlists
SELECT PRODUCTCODE, COUNT(USERID)
FROM WISHLIST
WHERE POSITION = 1
GROUP BY PRODUCTCODE;

--Total Amount spent in orders
SELECT USERID, SUM(PRICE) AS TOTALSPENT
FROM ORDERS
GROUP BY USERID

--Determine the most profitable days of the site
SELECT PURCHASEDATE, SUM(PRICE)
FROM ORDERS
GROUP BY PURCHASEDATE
ORDER BY SUM(PRICE) DESC

--Identifying games with the most amount of playtime from the userbase
SELECT PRODUCTCODE, SUM(HOURSPLAYED)
FROM USERLIBRARY
GROUP BY PRODUCTCODE
ORDER BY SUM(HOURSPLAYED) DESC
FETCH NEXT 5 ROWS ONLY;

--Find info on player's total infractions
SELECT USERID, COUNT(INFRACTIONID) AS TOTALINFRACTIONS
FROM INFRACTIONS
GROUP BY USERID
ORDER BY COUNT (INFRACTIONID) DESC;

--FINDING HOW MANY TIMES A user has broken the rules
SELECT USERiD, RULENUM, COUNT(RULENUM) AS TIMESBROKEN
FROM INFRACTIONS
GROUP BY USERID, RULENUM
ORDER BY USERID;

--Finding how many times a player has been punished for breaking the rules
SELECT RULENUM, PENALTY, COUNT(PENALTY) AS TIMESAPPLIED
FROM INFRACTIONS
GROUP BY RULENUM, PENALTY;

--TICKET SYSTEM TURNAROUND STATISTICS
SELECT AVG(DATEUPDATED - DATESUBMITTED) AS AVGTURNAROUNDTIME,
MAX(DATEUPDATED - DATESUBMITTED) AS MAXTURNAROUNDTIME,
MIN(DATEUPDATED - DATESUBMITTED) AS MINTURNAROUNDTIME
FROM USERSUPPORT
WHERE STATUS = 'CLOSED'

--CHECKING TO SEE IF TICKET SYSTEM IS BEING USED CARELESSLY
SELECT EMAIL, ISSUE, COUNT(ISSUE) AS ISSUEOCCURANCE
FROM USERSUPPORT
WHERE STATUS = 'NEW'
GROUP BY EMAIL, ISSUE, DATESUBMITTED
ORDER BY COUNT(ISSUE);

--CHECK TO SEE IF ANY USER'S PASSWORD IS THE SAME AS THEIR USERNAME
SELECT USERID, FIRSTNAME, LASTNAME, PASSWORD
FROM USERBASE
WHERE UPPER(PASSWORD) LIKE UPPER ('%' || FIRSTNAME || '%' ) OR
      UPPER(PASSWORD) LIKE UPPER ('%' || LASTNAME || '%' );

--AVERAGE cost of a product based on who it is published by
SELECT PUBLISHER, AVG(PRICE)
FROM PRODUCTLIST
GROUP BY PUBLISHER
ORDER BY PUBLISHER ASC;

--View that displays the PRODUCTNAME and PRICE for all products with a RELEASEDATE over 5 years ago and applies a 25% discount
CREATE OR REPLACE VIEW PRODUCTSALE AS
SELECT PRODUCTNAME, PRICE * 0.75 AS SALEPRICE
FROM PRODUCTLIST 
WHERE RELEASEDATE <= ADD_MONTHS(SYSDATE, -60);

--Calculate the maximum and minimum PRICE of all products based on GENRE
SELECT GENRE, MAX(PRICE) AS MAXPRICE, MIN(PRICE) AS MINPRICE
FROM PRODUCTLIST
GROUP BY GENRE;

--Creating a view that shows messages sent in the last week
CREATE OR REPLACE VIEW WEEKLYCHATLOG AS
SELECT *
FROM CHATLOG
WHERE DATESENT >= SYSDATE - 7;

--Creating a view that shows all users who were penalized in the last month
CREATE OR REPLACE VIEW LASTPENALTIES AS
SELECT USERID, DATEASSIGNED, PENALTY
FROM INFRACTIONS
WHERE PENALTY IS NOT NULL AND DATEASSIGNED >= SYSDATE - 30;